openapi: 3.0.3
info:
  title: Swagger MangerCe - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: MangerCe@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://MangerCe.Restaurant.io/api/v3
tags:
  - name: MangerCe
    description: Mexican Food
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: Restaurant
    description: Access to Menu orders
    externalDocs:
      description: Find out more about our Restaurant
      url: http://swagger.io
paths:
  /Dish:
    put:
      tags:
        - Dish
      summary: Update an existing Dish in the Menu
      description: Update an existing Dish by Id
      operationId: updateDish
      requestBody:
        description: Update an existent Dish in the Restaurant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
          application/xml:
            schema:
              $ref: '#/components/schemas/Dish'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Dish'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid ID supplied
        '404':
          description: Dish not found
        '405':
          description: Validation exception
      security:
        - dishmenu_auth:
            - write:dish
            - read:dish
    post:
      tags:
        - Dish
      summary: Add a new Dish to the Menu
      description: Add a new Dish to the Menu/Restaurant
      operationId: addDish
      requestBody:
        description: Create a new Dish in the Menu
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
          application/xml:
            schema:
              $ref: '#/components/schemas/Dish'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Dish'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Dish'
        '405':
          description: Invalid input
      security:
        - dishmenu_auth:
            - write:dish
            - read:dish
  /Dish/findByStatus:
    get:
      tags:
        - Dish
      summary: Finds Dishes by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findDishByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid status value
      security:
        - dishmenu_auth:
            - write:dish
            - read:dish
  /Dish/findByTags:
    get:
      tags:
        - Dish
      summary: Finds Dishes by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findDishesByTags
      parameters:
        - name: Dish
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid tag value
      security:
        - dishmenu_auth:
            - write:Dish
            - read:Dish
  /Dish/{DishId}:
    get:
      tags:
        - Dish
      summary: Find Dish by ID
      description: Returns a single Dish from the Menu
      operationId: getDishById
      parameters:
        - name: DishId
          in: path
          description: ID of Dish to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid ID supplied
        '404':
          description: Dish not found
      security:
        - api_key: []
        - dishmenu_auth:
            - write:dish
            - read:dish
    post:
      tags:
        - Dish
      summary: Updates a Dish in the Restaurant with form data
      description: ''
      operationId: updateDishWithForm
      parameters:
        - name: DishId
          in: path
          description: ID of dish that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of dish that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - dishmenu_auth:
            - write:dish
            - read:dish
    delete:
      tags:
        - Dish
      summary: Deletes a Dish
      description: delete a Dish
      operationId: deleteDish
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: DishId
          in: path
          description: Dish id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - dishmenu_auth:
            - write:dish
            - read:dish
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Flautas
      xml:
        name: category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Dish:
      required:
        - name of the dish
        - photo Of the Menu
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 98
        name:
          type: string
          example: Flautas con Salsa
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: Menu
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: dish status in the restaurant
          enum:
            - available
            - pending
            - sold
      xml:
        name: dish
  requestBodies:
    Dish:
      description: Dish object that needs to be added to the Menu
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dish'
        application/xml:
          schema:
            $ref: '#/components/schemas/Dish'
  securitySchemes:
    dishmenu_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://MagerCe.Restaurant.io/oauth/authorize
          scopes:
            write:pets: modify dishes in your account
            read:pets: read your disehes in the menu
    api_key:
      type: apiKey
      name: api_key
      in: header